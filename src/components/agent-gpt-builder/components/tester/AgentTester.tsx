
import React, { useState } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import AgentTestInterface from "./AgentTestInterface";
import AgentDeploymentSection from "./AgentDeploymentSection";

interface AgentTesterProps {
  agentName: string;
  agentInstructions: string;
}

const AgentTester: React.FC<AgentTesterProps> = ({ agentName, agentInstructions }) => {
  // Local state for the tester component
  const [userInput, setUserInput] = useState("");
  const [messages, setMessages] = useState([{ role: "system" as const, content: agentInstructions }]);
  const [loading, setLoading] = useState(false);
  
  const handleSendMessage = async () => {
    if (!userInput.trim() || !agentInstructions) return;

    // Add user message to chat
    const newMessages = [...messages, { role: "user" as const, content: userInput }];
    setMessages(newMessages);
    setUserInput("");
    setLoading(true);

    // Simulate AI response
    setTimeout(() => {
      setMessages([
        ...newMessages, 
        { 
          role: "assistant" as const, 
          content: `This is a simulated response to "${userInput}". In production, this would be generated by OpenAI based on the agent instructions.`
        }
      ]);
      setLoading(false);
    }, 1000);
  };

  const handleSaveAgent = async () => {
    // Simple toast notification for now
    alert("Agent saved successfully!");
  };

  return (
    <Card className="border border-white/10 bg-gradient-to-br from-[#1a0b2e]/70 to-[#2f1c4a]/70 shadow-xl rounded-xl overflow-hidden animate-fade-in" style={{ animationDelay: '0.7s' }}>
      <CardHeader className="border-b border-white/10 bg-gradient-to-r from-[#2f1c4a] to-[#1a0b2e]">
        <CardTitle className="text-white flex items-center gap-2">
          <span className="bg-[#9b87f5]/20 p-1 rounded-md">ðŸ§ª</span>
          Test Your Agent
        </CardTitle>
      </CardHeader>
      
      <CardContent className="p-6">
        <AgentTestInterface 
          messages={messages}
          handleSendMessage={handleSendMessage}
          userInput={userInput}
          setUserInput={setUserInput}
          loading={loading}
          agentInstructions={agentInstructions}
        />
        
        <AgentDeploymentSection 
          agentName={agentName}
          agentInstructions={agentInstructions}
          handleSaveAgent={handleSaveAgent}
        />
      </CardContent>
    </Card>
  );
};

export default AgentTester;
